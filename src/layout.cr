module Layout
  # Layout is in a reverse z pattern (they chose the worse way possible), 16x16 for each panel.
  #
  #    0 1 2 3 4 5 6 7 8 9 A B C D E F      0 1 2 3 4 5 6 7 8 9 A B C D E F
  #                                    ║ ╔══════════════════════════════════╗
  # 0 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 1 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 2 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 3 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 4 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 5 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 6 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 7 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 8 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 9 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # A ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # B ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # C ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # D ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # E ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # F ╚══════════════════════════════════╝ ║
  #                                    ╔═══╝
  #                                    ║ ╔══════════════════════════════════╗
  # 0 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 1 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 2 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 3 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 4 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 5 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 6 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 7 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # 8 ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # 9 ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # A ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # B ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # C ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # D ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗ ║ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  # E ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝ ║ ╔◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╝
  # F ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═══╝ ╚◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═◯═╗
  #
  module Z4
    getter bytes_per_pixel : UInt32 = 3u32
    getter panel_width : UInt32 = 16u32
    getter panel_height : UInt32 = 16u32
    getter panels_x : UInt32 = 2u32
    getter panels_y : UInt32 = 2u32

    def index(x, y)
      panel_x, x = x.divmod(@panel_width)
      panel_y, y = y.divmod(@panel_height)

      offset = y * @panel_width
      offset += y.even? ? @panel_width - x - 1 : x

      offset += (panel_y * @panels_x + panel_x) * @pixels_per_panel
    end
  end
end
